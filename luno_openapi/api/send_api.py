# coding: utf-8

"""
Luno API

The Luno API provides developers with a wealth of financial information provided through the Luno platform.  Through this secure system developers can:  <ul>    <li>Create accounts for trading in cryptocurrencies</li>    <li>Access current and historic cryptocurrency market data</li>    <li>Submit trade orders and view order status</li>    <li>Buy and sell Bitcoin and Ethereum</li>    <li>Send and receive Bitcoin and Ethereum</li>    <li>Generate Bitcoin and Ethereum wallet addresses</li>  </ul>   The Luno API brings the world of Bitcoin and Ethereum to your doorstep.

The version of the OpenAPI document: 1.2.5
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from typing import Any, Dict, List, Optional, Tuple, Union

from pydantic import Field, StrictBool, StrictFloat, StrictInt, StrictStr, validate_call
from typing_extensions import Annotated

from luno_openapi.api_client import ApiClient, RequestSerialized
from luno_openapi.api_response import ApiResponse
from luno_openapi.models.send_fee_response import SendFeeResponse
from luno_openapi.models.send_response import SendResponse
from luno_openapi.rest import RESTResponseType


class SendApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    async def send(
        self,
        amount: Annotated[
            StrictStr, Field(description="Amount to send as a decimal string.")
        ],
        currency: Annotated[StrictStr, Field(description="Currency to send.")],
        address: Annotated[
            StrictStr,
            Field(
                description='Destination address or email address.  <b>Note</b>: <ul> <li>Ethereum addresses must be <a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md" target="_blank" rel="nofollow">checksummed</a>.</li> <li>Ethereum sends to email addresses are not supported.</li> </ul>'
            ),
        ],
        description: Annotated[
            Optional[StrictStr],
            Field(
                description="User description for the transaction to record on the account statement."
            ),
        ] = None,
        message: Annotated[
            Optional[StrictStr],
            Field(
                description="Message to send to the recipient. This is only relevant when sending to an email address."
            ),
        ] = None,
        external_id: Annotated[
            Optional[StrictStr],
            Field(
                description='Optional unique ID to associate with this withdrawal. Useful to prevent duplicate sends in case of failure. This supports all alphanumeric characters, as well as "-" and "_".'
            ),
        ] = None,
        has_destination_tag: Annotated[
            Optional[StrictBool],
            Field(
                description="Optional boolean flag indicating that a XRP destination tag is provided (even if zero)."
            ),
        ] = None,
        destination_tag: Annotated[
            Optional[StrictInt],
            Field(
                description="Optional XRP destination tag. Note that HasDestinationTag must be true if this value is provided."
            ),
        ] = None,
        memo: Annotated[
            Optional[StrictStr],
            Field(
                description='Optional memo string used to provide account information for ATOM, etc. where it holds "account" information for a generic address.'
            ),
        ] = None,
        is_forex_send: Annotated[
            Optional[StrictBool],
            Field(
                description="Only required for Foreign Exchange Notification under the Malaysia FEN rules. IsForexSend must be true if sending to an address hosted outside of Malaysia."
            ),
        ] = None,
        is_drb: Annotated[
            Optional[StrictBool],
            Field(
                description="Only required for Foreign Exchange Notification under the Malaysia FEN rules. IsDRB must be true if the user has Domestic Ringgit Borrowing (DRB)."
            ),
        ] = None,
        forex_notice_self_declaration: Annotated[
            Optional[StrictBool],
            Field(
                description="Only required for Foreign Exchange Notification under the Malaysia FEN rules. ForexNoticeSelfDeclaration must be true if the user has exceeded his/her annual investment limit in foreign currency assets."
            ),
        ] = None,
        account_id: Annotated[
            Optional[StrictInt],
            Field(
                description="Optional source account. In case of multiple accounts for a single currency, the source account that will provide the funds for the transaction may be specified. If omitted, the default account will be used."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SendResponse:
        """Send

        Send assets from an Account. Please note that the asset type sent must match the receive address of the same cryptocurrency of the same type - Bitcoin to Bitcoin, Ethereum to Ethereum, etc.  Sends can be made to cryptocurrency receive addresses.  <b>Note:</b> This is currently unavailable to users who are verified in countries with money travel rules.  Permissions required: <code>Perm_W_Send</code>

        :param amount: Amount to send as a decimal string. (required)
        :type amount: str
        :param currency: Currency to send. (required)
        :type currency: str
        :param address: Destination address or email address.  <b>Note</b>: <ul> <li>Ethereum addresses must be <a href=\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md\" target=\"_blank\" rel=\"nofollow\">checksummed</a>.</li> <li>Ethereum sends to email addresses are not supported.</li> </ul> (required)
        :type address: str
        :param description: User description for the transaction to record on the account statement.
        :type description: str
        :param message: Message to send to the recipient. This is only relevant when sending to an email address.
        :type message: str
        :param external_id: Optional unique ID to associate with this withdrawal. Useful to prevent duplicate sends in case of failure. This supports all alphanumeric characters, as well as \"-\" and \"_\".
        :type external_id: str
        :param has_destination_tag: Optional boolean flag indicating that a XRP destination tag is provided (even if zero).
        :type has_destination_tag: bool
        :param destination_tag: Optional XRP destination tag. Note that HasDestinationTag must be true if this value is provided.
        :type destination_tag: int
        :param memo: Optional memo string used to provide account information for ATOM, etc. where it holds \"account\" information for a generic address.
        :type memo: str
        :param is_forex_send: Only required for Foreign Exchange Notification under the Malaysia FEN rules. IsForexSend must be true if sending to an address hosted outside of Malaysia.
        :type is_forex_send: bool
        :param is_drb: Only required for Foreign Exchange Notification under the Malaysia FEN rules. IsDRB must be true if the user has Domestic Ringgit Borrowing (DRB).
        :type is_drb: bool
        :param forex_notice_self_declaration: Only required for Foreign Exchange Notification under the Malaysia FEN rules. ForexNoticeSelfDeclaration must be true if the user has exceeded his/her annual investment limit in foreign currency assets.
        :type forex_notice_self_declaration: bool
        :param account_id: Optional source account. In case of multiple accounts for a single currency, the source account that will provide the funds for the transaction may be specified. If omitted, the default account will be used.
        :type account_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._send_serialize(
            amount=amount,
            currency=currency,
            address=address,
            description=description,
            message=message,
            external_id=external_id,
            has_destination_tag=has_destination_tag,
            destination_tag=destination_tag,
            memo=memo,
            is_forex_send=is_forex_send,
            is_drb=is_drb,
            forex_notice_self_declaration=forex_notice_self_declaration,
            account_id=account_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SendResponse",
        }
        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    async def send_with_http_info(
        self,
        amount: Annotated[
            StrictStr, Field(description="Amount to send as a decimal string.")
        ],
        currency: Annotated[StrictStr, Field(description="Currency to send.")],
        address: Annotated[
            StrictStr,
            Field(
                description='Destination address or email address.  <b>Note</b>: <ul> <li>Ethereum addresses must be <a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md" target="_blank" rel="nofollow">checksummed</a>.</li> <li>Ethereum sends to email addresses are not supported.</li> </ul>'
            ),
        ],
        description: Annotated[
            Optional[StrictStr],
            Field(
                description="User description for the transaction to record on the account statement."
            ),
        ] = None,
        message: Annotated[
            Optional[StrictStr],
            Field(
                description="Message to send to the recipient. This is only relevant when sending to an email address."
            ),
        ] = None,
        external_id: Annotated[
            Optional[StrictStr],
            Field(
                description='Optional unique ID to associate with this withdrawal. Useful to prevent duplicate sends in case of failure. This supports all alphanumeric characters, as well as "-" and "_".'
            ),
        ] = None,
        has_destination_tag: Annotated[
            Optional[StrictBool],
            Field(
                description="Optional boolean flag indicating that a XRP destination tag is provided (even if zero)."
            ),
        ] = None,
        destination_tag: Annotated[
            Optional[StrictInt],
            Field(
                description="Optional XRP destination tag. Note that HasDestinationTag must be true if this value is provided."
            ),
        ] = None,
        memo: Annotated[
            Optional[StrictStr],
            Field(
                description='Optional memo string used to provide account information for ATOM, etc. where it holds "account" information for a generic address.'
            ),
        ] = None,
        is_forex_send: Annotated[
            Optional[StrictBool],
            Field(
                description="Only required for Foreign Exchange Notification under the Malaysia FEN rules. IsForexSend must be true if sending to an address hosted outside of Malaysia."
            ),
        ] = None,
        is_drb: Annotated[
            Optional[StrictBool],
            Field(
                description="Only required for Foreign Exchange Notification under the Malaysia FEN rules. IsDRB must be true if the user has Domestic Ringgit Borrowing (DRB)."
            ),
        ] = None,
        forex_notice_self_declaration: Annotated[
            Optional[StrictBool],
            Field(
                description="Only required for Foreign Exchange Notification under the Malaysia FEN rules. ForexNoticeSelfDeclaration must be true if the user has exceeded his/her annual investment limit in foreign currency assets."
            ),
        ] = None,
        account_id: Annotated[
            Optional[StrictInt],
            Field(
                description="Optional source account. In case of multiple accounts for a single currency, the source account that will provide the funds for the transaction may be specified. If omitted, the default account will be used."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SendResponse]:
        """Send

        Send assets from an Account. Please note that the asset type sent must match the receive address of the same cryptocurrency of the same type - Bitcoin to Bitcoin, Ethereum to Ethereum, etc.  Sends can be made to cryptocurrency receive addresses.  <b>Note:</b> This is currently unavailable to users who are verified in countries with money travel rules.  Permissions required: <code>Perm_W_Send</code>

        :param amount: Amount to send as a decimal string. (required)
        :type amount: str
        :param currency: Currency to send. (required)
        :type currency: str
        :param address: Destination address or email address.  <b>Note</b>: <ul> <li>Ethereum addresses must be <a href=\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md\" target=\"_blank\" rel=\"nofollow\">checksummed</a>.</li> <li>Ethereum sends to email addresses are not supported.</li> </ul> (required)
        :type address: str
        :param description: User description for the transaction to record on the account statement.
        :type description: str
        :param message: Message to send to the recipient. This is only relevant when sending to an email address.
        :type message: str
        :param external_id: Optional unique ID to associate with this withdrawal. Useful to prevent duplicate sends in case of failure. This supports all alphanumeric characters, as well as \"-\" and \"_\".
        :type external_id: str
        :param has_destination_tag: Optional boolean flag indicating that a XRP destination tag is provided (even if zero).
        :type has_destination_tag: bool
        :param destination_tag: Optional XRP destination tag. Note that HasDestinationTag must be true if this value is provided.
        :type destination_tag: int
        :param memo: Optional memo string used to provide account information for ATOM, etc. where it holds \"account\" information for a generic address.
        :type memo: str
        :param is_forex_send: Only required for Foreign Exchange Notification under the Malaysia FEN rules. IsForexSend must be true if sending to an address hosted outside of Malaysia.
        :type is_forex_send: bool
        :param is_drb: Only required for Foreign Exchange Notification under the Malaysia FEN rules. IsDRB must be true if the user has Domestic Ringgit Borrowing (DRB).
        :type is_drb: bool
        :param forex_notice_self_declaration: Only required for Foreign Exchange Notification under the Malaysia FEN rules. ForexNoticeSelfDeclaration must be true if the user has exceeded his/her annual investment limit in foreign currency assets.
        :type forex_notice_self_declaration: bool
        :param account_id: Optional source account. In case of multiple accounts for a single currency, the source account that will provide the funds for the transaction may be specified. If omitted, the default account will be used.
        :type account_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._send_serialize(
            amount=amount,
            currency=currency,
            address=address,
            description=description,
            message=message,
            external_id=external_id,
            has_destination_tag=has_destination_tag,
            destination_tag=destination_tag,
            memo=memo,
            is_forex_send=is_forex_send,
            is_drb=is_drb,
            forex_notice_self_declaration=forex_notice_self_declaration,
            account_id=account_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SendResponse",
        }
        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    async def send_without_preload_content(
        self,
        amount: Annotated[
            StrictStr, Field(description="Amount to send as a decimal string.")
        ],
        currency: Annotated[StrictStr, Field(description="Currency to send.")],
        address: Annotated[
            StrictStr,
            Field(
                description='Destination address or email address.  <b>Note</b>: <ul> <li>Ethereum addresses must be <a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md" target="_blank" rel="nofollow">checksummed</a>.</li> <li>Ethereum sends to email addresses are not supported.</li> </ul>'
            ),
        ],
        description: Annotated[
            Optional[StrictStr],
            Field(
                description="User description for the transaction to record on the account statement."
            ),
        ] = None,
        message: Annotated[
            Optional[StrictStr],
            Field(
                description="Message to send to the recipient. This is only relevant when sending to an email address."
            ),
        ] = None,
        external_id: Annotated[
            Optional[StrictStr],
            Field(
                description='Optional unique ID to associate with this withdrawal. Useful to prevent duplicate sends in case of failure. This supports all alphanumeric characters, as well as "-" and "_".'
            ),
        ] = None,
        has_destination_tag: Annotated[
            Optional[StrictBool],
            Field(
                description="Optional boolean flag indicating that a XRP destination tag is provided (even if zero)."
            ),
        ] = None,
        destination_tag: Annotated[
            Optional[StrictInt],
            Field(
                description="Optional XRP destination tag. Note that HasDestinationTag must be true if this value is provided."
            ),
        ] = None,
        memo: Annotated[
            Optional[StrictStr],
            Field(
                description='Optional memo string used to provide account information for ATOM, etc. where it holds "account" information for a generic address.'
            ),
        ] = None,
        is_forex_send: Annotated[
            Optional[StrictBool],
            Field(
                description="Only required for Foreign Exchange Notification under the Malaysia FEN rules. IsForexSend must be true if sending to an address hosted outside of Malaysia."
            ),
        ] = None,
        is_drb: Annotated[
            Optional[StrictBool],
            Field(
                description="Only required for Foreign Exchange Notification under the Malaysia FEN rules. IsDRB must be true if the user has Domestic Ringgit Borrowing (DRB)."
            ),
        ] = None,
        forex_notice_self_declaration: Annotated[
            Optional[StrictBool],
            Field(
                description="Only required for Foreign Exchange Notification under the Malaysia FEN rules. ForexNoticeSelfDeclaration must be true if the user has exceeded his/her annual investment limit in foreign currency assets."
            ),
        ] = None,
        account_id: Annotated[
            Optional[StrictInt],
            Field(
                description="Optional source account. In case of multiple accounts for a single currency, the source account that will provide the funds for the transaction may be specified. If omitted, the default account will be used."
            ),
        ] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Send

        Send assets from an Account. Please note that the asset type sent must match the receive address of the same cryptocurrency of the same type - Bitcoin to Bitcoin, Ethereum to Ethereum, etc.  Sends can be made to cryptocurrency receive addresses.  <b>Note:</b> This is currently unavailable to users who are verified in countries with money travel rules.  Permissions required: <code>Perm_W_Send</code>

        :param amount: Amount to send as a decimal string. (required)
        :type amount: str
        :param currency: Currency to send. (required)
        :type currency: str
        :param address: Destination address or email address.  <b>Note</b>: <ul> <li>Ethereum addresses must be <a href=\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md\" target=\"_blank\" rel=\"nofollow\">checksummed</a>.</li> <li>Ethereum sends to email addresses are not supported.</li> </ul> (required)
        :type address: str
        :param description: User description for the transaction to record on the account statement.
        :type description: str
        :param message: Message to send to the recipient. This is only relevant when sending to an email address.
        :type message: str
        :param external_id: Optional unique ID to associate with this withdrawal. Useful to prevent duplicate sends in case of failure. This supports all alphanumeric characters, as well as \"-\" and \"_\".
        :type external_id: str
        :param has_destination_tag: Optional boolean flag indicating that a XRP destination tag is provided (even if zero).
        :type has_destination_tag: bool
        :param destination_tag: Optional XRP destination tag. Note that HasDestinationTag must be true if this value is provided.
        :type destination_tag: int
        :param memo: Optional memo string used to provide account information for ATOM, etc. where it holds \"account\" information for a generic address.
        :type memo: str
        :param is_forex_send: Only required for Foreign Exchange Notification under the Malaysia FEN rules. IsForexSend must be true if sending to an address hosted outside of Malaysia.
        :type is_forex_send: bool
        :param is_drb: Only required for Foreign Exchange Notification under the Malaysia FEN rules. IsDRB must be true if the user has Domestic Ringgit Borrowing (DRB).
        :type is_drb: bool
        :param forex_notice_self_declaration: Only required for Foreign Exchange Notification under the Malaysia FEN rules. ForexNoticeSelfDeclaration must be true if the user has exceeded his/her annual investment limit in foreign currency assets.
        :type forex_notice_self_declaration: bool
        :param account_id: Optional source account. In case of multiple accounts for a single currency, the source account that will provide the funds for the transaction may be specified. If omitted, the default account will be used.
        :type account_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._send_serialize(
            amount=amount,
            currency=currency,
            address=address,
            description=description,
            message=message,
            external_id=external_id,
            has_destination_tag=has_destination_tag,
            destination_tag=destination_tag,
            memo=memo,
            is_forex_send=is_forex_send,
            is_drb=is_drb,
            forex_notice_self_declaration=forex_notice_self_declaration,
            account_id=account_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SendResponse",
        }
        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _send_serialize(
        self,
        amount,
        currency,
        address,
        description,
        message,
        external_id,
        has_destination_tag,
        destination_tag,
        memo,
        is_forex_send,
        is_drb,
        forex_notice_self_declaration,
        account_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if amount is not None:

            _query_params.append(("amount", amount))

        if currency is not None:

            _query_params.append(("currency", currency))

        if address is not None:

            _query_params.append(("address", address))

        if description is not None:

            _query_params.append(("description", description))

        if message is not None:

            _query_params.append(("message", message))

        if external_id is not None:

            _query_params.append(("external_id", external_id))

        if has_destination_tag is not None:

            _query_params.append(("has_destination_tag", has_destination_tag))

        if destination_tag is not None:

            _query_params.append(("destination_tag", destination_tag))

        if memo is not None:

            _query_params.append(("memo", memo))

        if is_forex_send is not None:

            _query_params.append(("is_forex_send", is_forex_send))

        if is_drb is not None:

            _query_params.append(("is_drb", is_drb))

        if forex_notice_self_declaration is not None:

            _query_params.append(
                ("forex_notice_self_declaration", forex_notice_self_declaration)
            )

        if account_id is not None:

            _query_params.append(("account_id", account_id))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json"]
            )

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="POST",
            resource_path="/api/1/send",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    async def send_fee(
        self,
        amount: Annotated[
            StrictStr, Field(description="Amount to send as a decimal string.")
        ],
        currency: Annotated[StrictStr, Field(description="Currency to send.")],
        address: Annotated[
            StrictStr,
            Field(
                description='Destination address or email address.  <b>Note</b>: <ul> <li>Ethereum addresses must be <a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md" target="_blank" rel="nofollow">checksummed</a>.</li> <li>Ethereum sends to email addresses are not supported.</li> </ul>'
            ),
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SendFeeResponse:
        """Estimate send fees

        Calculate fees involved with a crypto send request.  Send address can be to a cryptocurrency receive address, or the email address of another Luno platform user.  Permissions required: <code>MP_None</code>

        :param amount: Amount to send as a decimal string. (required)
        :type amount: str
        :param currency: Currency to send. (required)
        :type currency: str
        :param address: Destination address or email address.  <b>Note</b>: <ul> <li>Ethereum addresses must be <a href=\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md\" target=\"_blank\" rel=\"nofollow\">checksummed</a>.</li> <li>Ethereum sends to email addresses are not supported.</li> </ul> (required)
        :type address: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._send_fee_serialize(
            amount=amount,
            currency=currency,
            address=address,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SendFeeResponse",
        }
        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    async def send_fee_with_http_info(
        self,
        amount: Annotated[
            StrictStr, Field(description="Amount to send as a decimal string.")
        ],
        currency: Annotated[StrictStr, Field(description="Currency to send.")],
        address: Annotated[
            StrictStr,
            Field(
                description='Destination address or email address.  <b>Note</b>: <ul> <li>Ethereum addresses must be <a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md" target="_blank" rel="nofollow">checksummed</a>.</li> <li>Ethereum sends to email addresses are not supported.</li> </ul>'
            ),
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SendFeeResponse]:
        """Estimate send fees

        Calculate fees involved with a crypto send request.  Send address can be to a cryptocurrency receive address, or the email address of another Luno platform user.  Permissions required: <code>MP_None</code>

        :param amount: Amount to send as a decimal string. (required)
        :type amount: str
        :param currency: Currency to send. (required)
        :type currency: str
        :param address: Destination address or email address.  <b>Note</b>: <ul> <li>Ethereum addresses must be <a href=\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md\" target=\"_blank\" rel=\"nofollow\">checksummed</a>.</li> <li>Ethereum sends to email addresses are not supported.</li> </ul> (required)
        :type address: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._send_fee_serialize(
            amount=amount,
            currency=currency,
            address=address,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SendFeeResponse",
        }
        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        await response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    async def send_fee_without_preload_content(
        self,
        amount: Annotated[
            StrictStr, Field(description="Amount to send as a decimal string.")
        ],
        currency: Annotated[StrictStr, Field(description="Currency to send.")],
        address: Annotated[
            StrictStr,
            Field(
                description='Destination address or email address.  <b>Note</b>: <ul> <li>Ethereum addresses must be <a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md" target="_blank" rel="nofollow">checksummed</a>.</li> <li>Ethereum sends to email addresses are not supported.</li> </ul>'
            ),
        ],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Estimate send fees

        Calculate fees involved with a crypto send request.  Send address can be to a cryptocurrency receive address, or the email address of another Luno platform user.  Permissions required: <code>MP_None</code>

        :param amount: Amount to send as a decimal string. (required)
        :type amount: str
        :param currency: Currency to send. (required)
        :type currency: str
        :param address: Destination address or email address.  <b>Note</b>: <ul> <li>Ethereum addresses must be <a href=\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md\" target=\"_blank\" rel=\"nofollow\">checksummed</a>.</li> <li>Ethereum sends to email addresses are not supported.</li> </ul> (required)
        :type address: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._send_fee_serialize(
            amount=amount,
            currency=currency,
            address=address,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "SendFeeResponse",
        }
        response_data = await self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _send_fee_serialize(
        self,
        amount,
        currency,
        address,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, Union[str, bytes]] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if amount is not None:

            _query_params.append(("amount", amount))

        if currency is not None:

            _query_params.append(("currency", currency))

        if address is not None:

            _query_params.append(("address", address))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json"]
            )

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/api/1/send_fee",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

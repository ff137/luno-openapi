# coding: utf-8

"""
    Luno API

    The Luno API provides developers with a wealth of financial information provided through the Luno platform.  Through this secure system developers can:  <ul>    <li>Create accounts for trading in cryptocurrencies</li>    <li>Access current and historic cryptocurrency market data</li>    <li>Submit trade orders and view order status</li>    <li>Buy and sell Bitcoin and Ethereum</li>    <li>Send and receive Bitcoin and Ethereum</li>    <li>Generate Bitcoin and Ethereum wallet addresses</li>  </ul>   The Luno API brings the world of Bitcoin and Ethereum to your doorstep. 

    The version of the OpenAPI document: 1.2.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing_extensions import Self


class CancelWithdrawalResponse(BaseModel):
    """
    CancelWithdrawalResponse response
    """ # noqa: E501
    amount: Optional[StrictStr] = Field(default=None, description="Amount to withdraw")
    created_at: Optional[StrictStr] = Field(default=None, description="Unix time the withdrawal was initiated, in milliseconds")
    currency: Optional[StrictStr] = Field(default=None, description="Withdrawal currency.")
    external_id: Optional[StrictStr] = Field(default=None, description="External ID has the value that was passed in when the Withdrawal request was posted.")
    fee: Optional[StrictStr] = Field(default=None, description="Withdrawal fee")
    id: Optional[StrictStr] = None
    status: Optional[StrictStr] = Field(default=None, description="Status")
    transfer_id: Optional[StrictStr] = Field(default=None, description="Transfer ID is the identifier of the Withdrawal's transfer once it completes.")
    type: Optional[StrictStr] = Field(default=None, description="Type distinguishes between different withdrawal methods where more than one is supported for the given currency.")
    __properties: ClassVar[List[str]] = ["amount", "created_at", "currency", "external_id", "fee", "id", "status", "transfer_id", "type"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['PENDING', 'PROCESSING', 'COMPLETED', 'CANCELLED', 'WAITING', 'CANCELLING', 'UNKNOWN']):
            raise ValueError("must be one of enum values ('PENDING', 'PROCESSING', 'COMPLETED', 'CANCELLED', 'WAITING', 'CANCELLING', 'UNKNOWN')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CancelWithdrawalResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CancelWithdrawalResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": obj.get("amount"),
            "created_at": obj.get("created_at"),
            "currency": obj.get("currency"),
            "external_id": obj.get("external_id"),
            "fee": obj.get("fee"),
            "id": obj.get("id"),
            "status": obj.get("status"),
            "transfer_id": obj.get("transfer_id"),
            "type": obj.get("type")
        })
        return _obj



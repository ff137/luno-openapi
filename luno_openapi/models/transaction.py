# coding: utf-8

"""
    Luno API

    The Luno API provides developers with a wealth of financial information provided through the Luno platform.  Through this secure system developers can:  <ul>    <li>Create accounts for trading in cryptocurrencies</li>    <li>Access current and historic cryptocurrency market data</li>    <li>Submit trade orders and view order status</li>    <li>Buy and sell Bitcoin and Ethereum</li>    <li>Send and receive Bitcoin and Ethereum</li>    <li>Generate Bitcoin and Ethereum wallet addresses</li>  </ul>   The Luno API brings the world of Bitcoin and Ethereum to your doorstep. 

    The version of the OpenAPI document: 1.2.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing_extensions import Self

from luno_openapi.models.detail_fields import DetailFields


class Transaction(BaseModel):
    """
    Transaction
    """  # noqa: E501

    account_id: Optional[StrictStr] = None
    available: Optional[StrictStr] = Field(default=None, description="Amount available")
    available_delta: Optional[StrictStr] = Field(
        default=None, description="Change in amount available"
    )
    balance: Optional[StrictStr] = Field(default=None, description="Account balance")
    balance_delta: Optional[StrictStr] = Field(
        default=None, description="Change in balance"
    )
    currency: Optional[StrictStr] = None
    description: Optional[StrictStr] = Field(
        default=None, description="Human-readable description of the transaction."
    )
    detail_fields: Optional[DetailFields] = None
    details: Optional[Dict[str, StrictStr]] = Field(
        default=None, description="Human-readable label-value attributes."
    )
    kind: Optional[StrictStr] = Field(
        default=None,
        description="The kind of the transaction indicates the transaction flow  Kinds explained:<br> <code>FEE</code> when transaction is towards Luno fees<br> <code>TRANSFER</code> when the transaction is a one way flow of funds, e.g. a deposit or crypto send<br> <code>EXCHANGE</code> when the transaction is part of a two way exchange, e.g. a trade or instant buy",
    )
    reference: Optional[StrictStr] = Field(
        default=None,
        description="A unique reference for the transaction this statement entry relates to. There may be multiple statement entries related to the same transaction. E.g. a withdrawal and the withdrawal fee are two separate statement entries with the same reference.",
    )
    row_index: Optional[StrictInt] = None
    timestamp: Optional[int] = Field(
        default=None, description="Unix timestamp, in milliseconds"
    )
    __properties: ClassVar[List[str]] = [
        "account_id",
        "available",
        "available_delta",
        "balance",
        "balance_delta",
        "currency",
        "description",
        "detail_fields",
        "details",
        "kind",
        "reference",
        "row_index",
        "timestamp",
    ]

    @field_validator("kind")
    def kind_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["FEE", "TRANSFER", "EXCHANGE", "INTEREST"]):
            raise ValueError(
                "must be one of enum values ('FEE', 'TRANSFER', 'EXCHANGE', 'INTEREST')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Transaction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of detail_fields
        if self.detail_fields:
            _dict["detail_fields"] = self.detail_fields.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Transaction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "account_id": obj.get("account_id"),
                "available": obj.get("available"),
                "available_delta": obj.get("available_delta"),
                "balance": obj.get("balance"),
                "balance_delta": obj.get("balance_delta"),
                "currency": obj.get("currency"),
                "description": obj.get("description"),
                "detail_fields": (
                    DetailFields.from_dict(obj["detail_fields"])
                    if obj.get("detail_fields") is not None
                    else None
                ),
                "details": obj.get("details"),
                "kind": obj.get("kind"),
                "reference": obj.get("reference"),
                "row_index": obj.get("row_index"),
                "timestamp": obj.get("timestamp"),
            }
        )
        return _obj

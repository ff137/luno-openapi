# coding: utf-8

"""
    Luno API

    The Luno API provides developers with a wealth of financial information provided through the Luno platform.  Through this secure system developers can:  <ul>    <li>Create accounts for trading in cryptocurrencies</li>    <li>Access current and historic cryptocurrency market data</li>    <li>Submit trade orders and view order status</li>    <li>Buy and sell Bitcoin and Ethereum</li>    <li>Send and receive Bitcoin and Ethereum</li>    <li>Generate Bitcoin and Ethereum wallet addresses</li>  </ul>   The Luno API brings the world of Bitcoin and Ethereum to your doorstep. 

    The version of the OpenAPI document: 1.2.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing_extensions import Self

from luno_openapi.models.address_meta import AddressMeta


class CreateFundingAddressResponse(BaseModel):
    """
    CreateFundingAddressResponse create wallet response body
    """  # noqa: E501

    account_id: Optional[StrictStr] = None
    address: Optional[StrictStr] = None
    address_meta: Optional[List[AddressMeta]] = None
    asset: Optional[StrictStr] = None
    assigned_at: Optional[StrictInt] = None
    name: Optional[StrictStr] = None
    qr_code_uri: Optional[StrictStr] = None
    receive_fee: Optional[StrictStr] = None
    total_received: Optional[StrictStr] = None
    total_unconfirmed: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "account_id",
        "address",
        "address_meta",
        "asset",
        "assigned_at",
        "name",
        "qr_code_uri",
        "receive_fee",
        "total_received",
        "total_unconfirmed",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateFundingAddressResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in address_meta (list)
        _items = []
        if self.address_meta:
            for _item in self.address_meta:
                if _item:
                    _items.append(_item.to_dict())
            _dict["address_meta"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateFundingAddressResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "account_id": obj.get("account_id"),
                "address": obj.get("address"),
                "address_meta": (
                    [AddressMeta.from_dict(_item) for _item in obj["address_meta"]]
                    if obj.get("address_meta") is not None
                    else None
                ),
                "asset": obj.get("asset"),
                "assigned_at": obj.get("assigned_at"),
                "name": obj.get("name"),
                "qr_code_uri": obj.get("qr_code_uri"),
                "receive_fee": obj.get("receive_fee"),
                "total_received": obj.get("total_received"),
                "total_unconfirmed": obj.get("total_unconfirmed"),
            }
        )
        return _obj

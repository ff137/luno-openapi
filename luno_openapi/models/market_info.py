# coding: utf-8

"""
    Luno API

    The Luno API provides developers with a wealth of financial information provided through the Luno platform.  Through this secure system developers can:  <ul>    <li>Create accounts for trading in cryptocurrencies</li>    <li>Access current and historic cryptocurrency market data</li>    <li>Submit trade orders and view order status</li>    <li>Buy and sell Bitcoin and Ethereum</li>    <li>Send and receive Bitcoin and Ethereum</li>    <li>Generate Bitcoin and Ethereum wallet addresses</li>  </ul>   The Luno API brings the world of Bitcoin and Ethereum to your doorstep. 

    The version of the OpenAPI document: 1.2.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing_extensions import Self


class MarketInfo(BaseModel):
    """
    MarketInfo current market information
    """  # noqa: E501

    base_currency: Optional[StrictStr] = Field(
        default=None, description="Base currency code"
    )
    counter_currency: Optional[StrictStr] = Field(
        default=None, description="Counter currency code"
    )
    fee_scale: Optional[StrictInt] = Field(
        default=None, description="Fee decimal places"
    )
    market_id: Optional[StrictStr] = Field(
        default=None, description="Unique identifier for the market"
    )
    max_price: Optional[StrictStr] = Field(
        default=None, description="Maximum order price"
    )
    max_volume: Optional[StrictStr] = Field(
        default=None, description="Maximum order volume"
    )
    min_price: Optional[StrictStr] = Field(
        default=None, description="Minimum order price"
    )
    min_volume: Optional[StrictStr] = Field(
        default=None, description="Minimum order volume"
    )
    price_scale: Optional[StrictInt] = Field(
        default=None, description="Price decimal places"
    )
    trading_status: Optional[StrictStr] = Field(
        default=None,
        description="Current market trading status:<br> <code>POST_ONLY</code> Trading is indefinitely suspended. This state is commonly used when new markets are being launched to give traders enough time to setup their orders before trading begins. When in this status, orders can only be posted as post-only.<br> <code>ACTIVE</code> Trading is fully enabled.<br> <code>SUSPENDED</code> Trading has been temporarily suspended due to very high volatility. When in this status, orders can only be posted as post-only.<br> <code>Unknown</code> Trading status is unknown. This could indicate a temporary error on the market and should resolve shortly.",
    )
    volume_scale: Optional[StrictInt] = Field(
        default=None, description="Volume decimal places"
    )
    __properties: ClassVar[List[str]] = [
        "base_currency",
        "counter_currency",
        "fee_scale",
        "market_id",
        "max_price",
        "max_volume",
        "min_price",
        "min_volume",
        "price_scale",
        "trading_status",
        "volume_scale",
    ]

    @field_validator("trading_status")
    def trading_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["POST_ONLY", "ACTIVE", "SUSPENDED", "UNKNOWN"]):
            raise ValueError(
                "must be one of enum values ('POST_ONLY', 'ACTIVE', 'SUSPENDED', 'UNKNOWN')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MarketInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MarketInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "base_currency": obj.get("base_currency"),
                "counter_currency": obj.get("counter_currency"),
                "fee_scale": obj.get("fee_scale"),
                "market_id": obj.get("market_id"),
                "max_price": obj.get("max_price"),
                "max_volume": obj.get("max_volume"),
                "min_price": obj.get("min_price"),
                "min_volume": obj.get("min_volume"),
                "price_scale": obj.get("price_scale"),
                "trading_status": obj.get("trading_status"),
                "volume_scale": obj.get("volume_scale"),
            }
        )
        return _obj
